#!/usr/bin/env tclsh

namespace eval intcode {
    namespace export evaluate
    namespace import ::tcl::mathop::+ ::tcl::mathop::*

    proc evaluate {program input1 input2 {debug false}} {
        set seq [split $program ,]
        lset seq 1 $input1
        lset seq 2 $input2
        set result [execute [join $seq ,] $debug]
        return [lindex [split $result ,] 0]
    }

    proc execute {program {debug false}} {
        set seq [split $program ,]
        set ptr 0

        while {$ptr < [llength $seq]} {
            set opcode [lindex $seq $ptr]
            set op [expr {$opcode % 100}]
            switch -exact -- $op {
                99 {
                    debug $debug [list $ptr $opcode - -]
                    incr ptr 1
                    break
                }
                1 { binaryMathOperation $opcode ptr seq + $debug }
                2 { binaryMathOperation $opcode ptr seq * $debug }
            }
        }

        return [join $seq ,]
    }

    # a binary math operation looks like
    #     a,b,c,d
    # where
    #     a = the op code
    #     b = the first operand parameter
    #     c = the second operand parameter
    #     d = the position where the result is written
    proc binaryMathOperation {opcode ptrName seqName operation debug} {
        upvar 1 $ptrName ptr
        upvar 1 $seqName seq
        lassign [lrange $seq $ptr+1 $ptr+3] param1 param2 dest
        set op1 [lindex $seq $param1]
        set op2 [lindex $seq $param2]
        set result [$operation $op1 $op2]
        debug $debug [list $ptr [list $opcode $param1 $param2 $dest] $op1 $op2 $result]
        lset seq $dest $result
        incr ptr 4
    }

    proc debug {debug msg} {
        if {$debug} {puts $msg}
    }
}
