#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source ../lib/intcode.tcl

# day 2

test op-1.1 "no operations" -body {
    set intcode [IntCode new "99"]
    $intcode execute
} -returnCodes ok -result "99"

test op-1.2 "addition 1" -body {
    set intcode [IntCode new "1,5,6,3,99,10,20"]
    $intcode execute
} -returnCodes ok -result "1,5,6,30,99,10,20"

test op-1.3 "addition 2" -body {
    set intcode [IntCode new "1,0,0,0,99"]
    $intcode execute
} -returnCodes ok -result "2,0,0,0,99"

test op-1.4 "addition 3" -body {
    set intcode [IntCode new "1,1,1,4,99,5,6,0,99"]
    $intcode execute
} -returnCodes ok -result "30,1,1,4,2,5,6,0,99"

test op-1.5 "multiplication 1" -body {
    set intcode [IntCode new "2,3,0,3,99"]
    $intcode execute
} -returnCodes ok -result "2,3,0,6,99"

test op-1.6 "multiplication 2" -body {
    set intcode [IntCode new "2,4,4,5,99,0"]
    $intcode execute
} -returnCodes ok -result "2,4,4,5,99,9801"

test op-1.7 "multiple operations" -body {
    set intcode [IntCode new "1,9,10,3,2,3,11,0,99,30,40,50"]
    $intcode execute
} -returnCodes ok -result "3500,9,10,70,2,3,11,0,99,30,40,50"

test op-1.8 "evaluate multiple operations" -body {
    set intcode [IntCode new "1,9,10,3,2,3,11,0,99,30,40,50"]
    $intcode setAt 1 9
    $intcode setAt 2 10
    $intcode evaluate
} -returnCodes ok -result 3500

test op-1.9 "evaluate addition 2" -body {
    set intcode [IntCode new "1,0,0,0,99"]
    $intcode setAt 1 4
    $intcode setAt 2 4
    $intcode evaluate
} -returnCodes ok -result [expr {99 + 99}]

# day 5, part 1

test op-2.1 "save input" -body {
    set intcode [IntCode new "3,0,99"]
    $intcode evaluate 42
} -returnCodes ok -result 42

test op-2.2 "print input" -body {
    set intcode [IntCode new "3,0,4,0,99"]
    $intcode evaluate 42
} -returnCodes ok -output "42\n" -result 42

test op-3.1 "addition, modes, first param is immediate" -body {
    set intcode [IntCode new "101,5,6,0,99,10,20"]
    $intcode evaluate
} -returnCodes ok -result 25

test op-3.2 "addition, modes, second param is immediate" -body {
    set intcode [IntCode new "1001,5,6,0,99,10,20"]
    $intcode evaluate
} -returnCodes ok -result 16

test op-3.3 "addition, modes, both params immediate" -body {
    set intcode [IntCode new "1101,5,6,0,99,10,20"]
    $intcode evaluate
} -returnCodes ok -result 11

test op-3.4 "multiplication, modes, first param is immediate" -body {
    set intcode [IntCode new "102,5,6,0,99,10,20"]
    $intcode evaluate
} -returnCodes ok -result 100

test op-3.5 "multiplication, modes, second param is immediate" -body {
    set intcode [IntCode new "1002,5,6,0,99,10,20"]
    $intcode evaluate
} -returnCodes ok -result 60

test op-3.6 "multiplication, modes, both params immediate" -body {
    set intcode [IntCode new "1102,5,6,0,99,10,20"]
    $intcode evaluate
} -returnCodes ok -result 30

test op-3.7 "modes again" -body {
    set intcode [IntCode new "1002,4,3,4,33"]
    $intcode evaluate
} -returnCodes ok -result 1002

# day 5, part 2

test op-4.1 "jump-if-true" -body {
    set intcode [IntCode new "1005,11,6,4,9,99,4,10,99,100,200,1"]
    $intcode evaluate
} -returnCodes ok -output "200\n" -result 1005

test op-4.2 "jump-if-true" -body {
    set intcode [IntCode new "1005,11,6,4,9,99,4,10,99,100,200,0"]
    $intcode evaluate
} -returnCodes ok -output "100\n" -result 1005

test op-4.3 "jump-if-false" -body {
    set intcode [IntCode new "1006,11,6,4,9,99,4,10,99,100,200,1"]
    $intcode evaluate
} -returnCodes ok -output "100\n" -result 1006

test op-4.4 "jump-if-false" -body {
    set intcode [IntCode new "1006,11,6,4,9,99,4,10,99,100,200,0"]
    $intcode evaluate
} -returnCodes ok -output "200\n" -result 1006

test op-4.5 "lt" -body {
    set intcode [IntCode new "1107,6,7,0,99"]
    $intcode evaluate
} -returnCodes ok -result 1

test op-4.6 "lt" -body {
    set intcode [IntCode new "1107,8,7,0,99"]
    $intcode evaluate
} -returnCodes ok -result 0

test op-4.7 "eq" -body {
    set intcode [IntCode new "1108,7,7,0,99"]
    $intcode evaluate
} -returnCodes ok -result 1

test op-4.8 "eq" -body {
    set intcode [IntCode new "1108,6,7,0,99"]
    $intcode evaluate
} -returnCodes ok -result 0

test op-5.1 "output 999 if the input is below 8" -body {
    set prog "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99"
    set intcode [IntCode new $prog]
    $intcode evaluate 7
} -returnCodes ok -output "999\n" -result 3

test op-5.2 "output 1000 if the input is 8" -body {
    set prog "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99"
    set intcode [IntCode new $prog]
    $intcode evaluate 8
} -returnCodes ok -output "1000\n" -result 3

test op-5.3 "output 1001 if the input is more than 8" -body {
    set prog "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99"
    set intcode [IntCode new $prog]
    $intcode evaluate 9
} -returnCodes ok -output "1001\n" -result 3


cleanupTests
